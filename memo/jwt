https://qiita.com/tomoyukilabs/items/faa66805a440f4b30cfb
https://qiita.com/tomoyukilabs/items/b346a71a920eb7a93501
https://techblog.scouter.co.jp/entry/2019/03/13/135739
https://www.wakuwakubank.com/posts/523-it-jwt/
https://qiita.com/rs_/items/178f549c7a29c30fcbdb


https://qiita.com/eku0331/items/c79395858d13ada89843
【フロント】
ユーザー情報 (メールアドレス、パスワード等) を送信
【サーバー】
リクエストされたユーザー情報を元にJWTでトークンを生成
トークンをフロントへ返す
【フロント】
返ってきたトークンがbase64urlでエンコードされているため、base64 に変換
変換したものをLocalStorageに保存
このときトークン内のユーザー情報には、上に書いた4種類のユーザータイプ情報も含んでいます。

2回目以降のログイン・画面更新時
【フロント】
Tokenの有無の確認
LocalStorageにTokenがあるかどうかを確認
ある場合は、HTTPヘッダに入れてサーバーにアクセスする
ない場合は、そのユーザータイプによって適切なページへリダイレクトさせる
【フロント】
Tokenの有効期限の確認
LocalStorageにTokenがある場合、その有効期限を確認
有効期限が切れている場合、サーバーに問い合わせし、Tokenを更新
【サーバー】
Tokenの更新リクエストがきたらJWTをリフレッシュして返す（このときフロントでは、初回登録時と同じように返ってきたトークンをLocalStorageに保存します）
【フロント】
サーバーにアクセス
有効なアクセスであることがフロントで確認されたらサーバーにアクセスをします
【サーバー】
トークンの認証を確認しデータを返す
初回登録時に発行したトークンをLocalStorageに保管しており、有効期限やユーザータイプの情報を持っているため、2回目以降のログイン・画面更新時のサーバーへのアクセスは多くても2回に抑えられています。

フロントエンドでの処理は、ユーザー情報がすべてトークン内に記述されており、JSONフォーマットなので処理もとても簡単に行えますね。

